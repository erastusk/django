How to Start a Project
    - django-admin startproject <name of project>
    - cd into project
    - python manage.py runserver
Requests lifecycle
    Browser/Request -> urls.py (looks at request URL, decides which function to fiure in view.py)
    -> views.py (function returns a response back to browser by rendering 
            request and html file) 
    -> Browser

Urls.py
    - path uses routes without regex
    - re_path uses routes with regex support.    

How to start working on a project.
    - First need a views.py file, it's not autogenerated.
    - Add routes in urls.py calling specific functions in views.py



                        _Django APP Structure_
                        ______________________

                             
                            Django_Project
                      _____________|______________    
                      |                          |    
                Django_Project                manage.py
                      |
        ______________|____________ ________________________
        |                          |                        |    
    App A           App B        App C                  /templates - templates used but ALL apps, global templates.
    urls.py         urls.py      urls.py
    /templates      views.py     views.py
                    /templates   /templates  
                    ../App B     ../App C    


To create apps within your main project
     - cd in root project app then run python manage.py startapp <app name>
     - When you create a templates folder also create folder in it as <app name>
     - Register new app in settings file under INSTALLED_APPS   
     - Register new urls in main project urls.py
        - Here you use render which points to the app urls file as opposed to directly pointing to that apps views.py


Models  
- A Model = A class representing a table.
- Model = Table in database ?

Creating a Model
    - Create the model class within a models.py file
    - Then run python manage.py migrate to apply default models that come with the framework
    - Then to apply your new model class  create a migration file that captures changes of your new model
        - python manage.py makemigrations
        - view file then migrate, python manage.py makemigrate to apply changes to database.

ORM, database interaction
https://docs.djangoproject.com/en/4.0/topics/db/queries/
    - python manage.py shell
    - import model - from <app name>.<models> import <class model>
        - eg from importlib.metadata import files
from articles.models import Article
    - If errors occur with the new model, run python manage.py migrate --run-syncdb
    - Article.objects.all()
    - Article.objects.all().order_by('date')
    - b = Article(title='Test title', slug='Test slug', body='This is a test body'), b.save(),  b.title
 <QuerySet [<Article: Article object (1)>, <Article: Article object (2)>, <Article: Article object (3)>, <Article: Article object (4)>]>

 To get a better view of above entries, say list by title is create a __str__ method that returns title.   

Admin
- To create a superuser for admin page  python manage.py createsuperuser  
- To use your created model, you'll need to import from admin.py and add admin.site.register(Article) which asks django to register the model in the admin site.

Static Files, css, images etc.
- Production preffered location should be a cloud, AWS-S3
- locally , in root project urls.py from django.contrib.staticfiles.urls import staticfiles_urlpatterns
    This checks if we're running in debug mode(local) to know how to serve up static files.
- in settings.py, STATIC_URL setting ('/static'), is the location you HAVE TO include in the url to get to static files
    its NOT the path to the static files
    
- STATICFILES_DIRS = os.path.join(BASE_DIR, 'assets') in settings.py is the actual location of static files, so you'll need to create a assets directory under the base dir.    

Named URL Parameters
- From a main page, click on a link and go to the individual page. How would that link know where to go? In our example here, when an article is added there's a slugfield or id
    that's passed. So this field can be used to retrieve a specific article. 

How it works:
user clicks on link with a id associate with it -> main urls.py captures base url -> sends to app urls.py -> views function (request, id) -> query slug in db
-> Render db query results to user -> user. Regex that captures your id depends on how you configured it eg url(r'^?P<slug>)  
    urls.py -> path('<int:id>', views.article_id, name="article_id")
    views.py -> def article_id (request, id):
<h1><a href="{% url 'article_id' id=article.id %}">{{ article.title }}</a></h1> 
- In Django instead of hardcording a view to use, url for is used , followed by the view function name
- Remember the  main landing page displays a list of all articles queried from the db with an id, This is always available. So when the a tag
    is clicked on it will send back the request with the id, that can be queried and individual article sent back above.

Upload media
As static files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

